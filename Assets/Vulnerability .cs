using System;
using System.Net.Http;
using System.Threading.Tasks;
using System.Windows.Forms;
using MySql.Data.MySqlClient;

namespace Assets
{
    public partial class Vulnerability : Form
    {
        public Vulnerability()
        {
            InitializeComponent();
        }

        private async void button1_Click(object sender, EventArgs e)
        {
            string cs = StringConnector.CnnVal("EmployeesDB");

            string selectQuery = "SELECT * FROM SystemInfoTable WHERE AssetID = @AssetID";

            using (var con = new MySqlConnection(cs))
            {
                con.Open();
                try
                {
                    MySqlCommand selectCommand = new MySqlCommand(selectQuery, con);
                    selectCommand.Parameters.AddWithValue("@AssetID", int.Parse(IDBox.Text));

                    using (MySqlDataReader reader = selectCommand.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            SNBox.Text = reader["OSName"].ToString();
                            MoBox.Text = reader["OSVersion"].ToString();

                           
                            string osName = SNBox.Text;
                            string osVersion = MoBox.Text;

                           
                            string apiUrl = ConstructApiUrl(osVersion);

                            string result = await GetDataFromApi(apiUrl);

                            ResultTextBox.Text = result;
                        }
                        else
                        {
                            MessageBox.Show("Record not found");
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
            }
        }

        private string ConstructApiUrl(string osVersion)
        {
          
            return $"https://services.nvd.nist.gov/rest/json/cve/1.0/CVE-2021-3456";
        }

        private async Task<string> GetDataFromApi(string apiUrl)
        {
            // Adjust this method to fetch data from the API based on the constructed URL
            using (var httpClient = new HttpClient())
            {
                try
                {
                    var response = await httpClient.GetStringAsync(apiUrl);
                    return response;
                }
                catch (HttpRequestException ex)
                {
                    // Handle exception
                    return $"Error: {ex.Message}";
                }
            }
        }

        private void GoBack_Click(object sender, EventArgs e)
        {
            Dashboard Dashboard = new Dashboard();


            Dashboard.Show();


            this.Hide();
        }
    }
}
